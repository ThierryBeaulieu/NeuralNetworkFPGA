// Generated by CIRCT firtool-1.62.0
module MaxPeriodFibonacciLFSR(
  input  clock,
         reset,
  output io_out_0,
         io_out_1,
         io_out_2,
         io_out_3,
         io_out_4,
         io_out_5,
         io_out_6,
         io_out_7,
         io_out_8,
         io_out_9
);

  reg state_0;
  reg state_1;
  reg state_2;
  reg state_3;
  reg state_4;
  reg state_5;
  reg state_6;
  reg state_7;
  reg state_8;
  reg state_9;
  always @(posedge clock) begin
    if (reset) begin
      state_0 <= 1'h0;
      state_1 <= 1'h1;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h1;
      state_6 <= 1'h0;
      state_7 <= 1'h0;
      state_8 <= 1'h0;
      state_9 <= 1'h0;
    end
    else begin
      state_0 <= state_9 ^ state_6;
      state_1 <= state_0;
      state_2 <= state_1;
      state_3 <= state_2;
      state_4 <= state_3;
      state_5 <= state_4;
      state_6 <= state_5;
      state_7 <= state_6;
      state_8 <= state_7;
      state_9 <= state_8;
    end
  end // always @(posedge)
  assign io_out_0 = state_0;
  assign io_out_1 = state_1;
  assign io_out_2 = state_2;
  assign io_out_3 = state_3;
  assign io_out_4 = state_4;
  assign io_out_5 = state_5;
  assign io_out_6 = state_6;
  assign io_out_7 = state_7;
  assign io_out_8 = state_8;
  assign io_out_9 = state_9;
endmodule

module B2S(
  input        clock,
               reset,
  input  [9:0] io_inputComparator,
  output       io_outputStream
);

  wire _randomNumber_prng_io_out_0;
  wire _randomNumber_prng_io_out_1;
  wire _randomNumber_prng_io_out_2;
  wire _randomNumber_prng_io_out_3;
  wire _randomNumber_prng_io_out_4;
  wire _randomNumber_prng_io_out_5;
  wire _randomNumber_prng_io_out_6;
  wire _randomNumber_prng_io_out_7;
  wire _randomNumber_prng_io_out_8;
  wire _randomNumber_prng_io_out_9;
  MaxPeriodFibonacciLFSR randomNumber_prng (
    .clock    (clock),
    .reset    (reset),
    .io_out_0 (_randomNumber_prng_io_out_0),
    .io_out_1 (_randomNumber_prng_io_out_1),
    .io_out_2 (_randomNumber_prng_io_out_2),
    .io_out_3 (_randomNumber_prng_io_out_3),
    .io_out_4 (_randomNumber_prng_io_out_4),
    .io_out_5 (_randomNumber_prng_io_out_5),
    .io_out_6 (_randomNumber_prng_io_out_6),
    .io_out_7 (_randomNumber_prng_io_out_7),
    .io_out_8 (_randomNumber_prng_io_out_8),
    .io_out_9 (_randomNumber_prng_io_out_9)
  );
  assign io_outputStream =
    {_randomNumber_prng_io_out_9,
     _randomNumber_prng_io_out_8,
     _randomNumber_prng_io_out_7,
     _randomNumber_prng_io_out_6,
     _randomNumber_prng_io_out_5,
     _randomNumber_prng_io_out_4,
     _randomNumber_prng_io_out_3,
     _randomNumber_prng_io_out_2,
     _randomNumber_prng_io_out_1,
     _randomNumber_prng_io_out_0} > io_inputComparator;
endmodule

