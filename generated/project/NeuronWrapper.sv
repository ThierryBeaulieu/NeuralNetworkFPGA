// Generated by CIRCT firtool-1.62.0
module MaxPeriodFibonacciLFSR(
  input  clock,
         reset,
  output io_out_0,
         io_out_1,
         io_out_2,
         io_out_3,
         io_out_4,
         io_out_5,
         io_out_6,
         io_out_7
);

  reg state_0;
  reg state_1;
  reg state_2;
  reg state_3;
  reg state_4;
  reg state_5;
  reg state_6;
  reg state_7;
  always @(posedge clock) begin
    if (reset) begin
      state_0 <= 1'h0;
      state_1 <= 1'h1;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h1;
      state_6 <= 1'h0;
      state_7 <= 1'h0;
    end
    else begin
      state_0 <= state_7 ^ state_5 ^ state_4 ^ state_3;
      state_1 <= state_0;
      state_2 <= state_1;
      state_3 <= state_2;
      state_4 <= state_3;
      state_5 <= state_4;
      state_6 <= state_5;
      state_7 <= state_6;
    end
  end // always @(posedge)
  assign io_out_0 = state_0;
  assign io_out_1 = state_1;
  assign io_out_2 = state_2;
  assign io_out_3 = state_3;
  assign io_out_4 = state_4;
  assign io_out_5 = state_5;
  assign io_out_6 = state_6;
  assign io_out_7 = state_7;
endmodule

module B2SUnipolar(
  input        clock,
               reset,
  input  [7:0] io_inputPixel,
  output       io_outputStream
);

  wire _randomNumber_prng_io_out_0;
  wire _randomNumber_prng_io_out_1;
  wire _randomNumber_prng_io_out_2;
  wire _randomNumber_prng_io_out_3;
  wire _randomNumber_prng_io_out_4;
  wire _randomNumber_prng_io_out_5;
  wire _randomNumber_prng_io_out_6;
  wire _randomNumber_prng_io_out_7;
  MaxPeriodFibonacciLFSR randomNumber_prng (
    .clock    (clock),
    .reset    (reset),
    .io_out_0 (_randomNumber_prng_io_out_0),
    .io_out_1 (_randomNumber_prng_io_out_1),
    .io_out_2 (_randomNumber_prng_io_out_2),
    .io_out_3 (_randomNumber_prng_io_out_3),
    .io_out_4 (_randomNumber_prng_io_out_4),
    .io_out_5 (_randomNumber_prng_io_out_5),
    .io_out_6 (_randomNumber_prng_io_out_6),
    .io_out_7 (_randomNumber_prng_io_out_7)
  );
  assign io_outputStream =
    {_randomNumber_prng_io_out_7,
     _randomNumber_prng_io_out_6,
     _randomNumber_prng_io_out_5,
     _randomNumber_prng_io_out_4,
     _randomNumber_prng_io_out_3,
     _randomNumber_prng_io_out_2,
     _randomNumber_prng_io_out_1,
     _randomNumber_prng_io_out_0} < io_inputPixel;
endmodule

module B2ISBipolar(
  input        clock,
               reset,
  output [1:0] io_outputStream
);

  wire _randomNumber_prng_io_out_0;
  wire _randomNumber_prng_io_out_1;
  wire _randomNumber_prng_io_out_2;
  wire _randomNumber_prng_io_out_3;
  wire _randomNumber_prng_io_out_4;
  wire _randomNumber_prng_io_out_5;
  wire _randomNumber_prng_io_out_6;
  wire _randomNumber_prng_io_out_7;
  MaxPeriodFibonacciLFSR randomNumber_prng (
    .clock    (clock),
    .reset    (reset),
    .io_out_0 (_randomNumber_prng_io_out_0),
    .io_out_1 (_randomNumber_prng_io_out_1),
    .io_out_2 (_randomNumber_prng_io_out_2),
    .io_out_3 (_randomNumber_prng_io_out_3),
    .io_out_4 (_randomNumber_prng_io_out_4),
    .io_out_5 (_randomNumber_prng_io_out_5),
    .io_out_6 (_randomNumber_prng_io_out_6),
    .io_out_7 (_randomNumber_prng_io_out_7)
  );
  assign io_outputStream =
    {{_randomNumber_prng_io_out_7,
      _randomNumber_prng_io_out_6,
      _randomNumber_prng_io_out_5,
      _randomNumber_prng_io_out_4,
      _randomNumber_prng_io_out_3,
      _randomNumber_prng_io_out_2,
      _randomNumber_prng_io_out_1,
      _randomNumber_prng_io_out_0} - 8'h80 == 8'h7F,
     1'h1};
endmodule

module BitwiseAND(
  input  [1:0] io_inputInteger,
  input        io_inputBit,
  output [1:0] io_outputStream
);

  assign io_outputStream = io_inputBit ? io_inputInteger : 2'h0;
endmodule

module TreeAdder(
  input  [1:0] io_inputStream_0,
               io_inputStream_1,
               io_inputStream_2,
               io_inputStream_3,
               io_inputStream_4,
               io_inputStream_5,
               io_inputStream_6,
               io_inputStream_7,
  output [8:0] io_outputStream
);

  wire [2:0] _io_outputStream_T =
    {io_inputStream_0[1], io_inputStream_0} + {io_inputStream_1[1], io_inputStream_1};
  wire [2:0] _io_outputStream_T_1 =
    {io_inputStream_2[1], io_inputStream_2} + {io_inputStream_3[1], io_inputStream_3};
  wire [2:0] _io_outputStream_T_2 =
    {io_inputStream_4[1], io_inputStream_4} + {io_inputStream_5[1], io_inputStream_5};
  wire [2:0] _io_outputStream_T_3 =
    {io_inputStream_6[1], io_inputStream_6} + {io_inputStream_7[1], io_inputStream_7};
  wire [3:0] _io_outputStream_T_4 =
    {_io_outputStream_T[2], _io_outputStream_T}
    + {_io_outputStream_T_1[2], _io_outputStream_T_1};
  wire [3:0] _io_outputStream_T_5 =
    {_io_outputStream_T_2[2], _io_outputStream_T_2}
    + {_io_outputStream_T_3[2], _io_outputStream_T_3};
  wire [4:0] _io_outputStream_T_6 =
    {_io_outputStream_T_4[3], _io_outputStream_T_4}
    + {_io_outputStream_T_5[3], _io_outputStream_T_5};
  assign io_outputStream = {{4{_io_outputStream_T_6[4]}}, _io_outputStream_T_6};
endmodule

module NStanh(
  input        clock,
               reset,
  input  [8:0] io_inputSi,
  output       io_outputStream
);

  reg [9:0] m_counter;
  always @(posedge clock) begin
    if (reset)
      m_counter <= 10'h0;
    else if ($signed(m_counter) < 10'sh0)
      m_counter <= 10'h0;
    else if ($signed(m_counter) > 10'sh1F)
      m_counter <= 10'h1F;
    else
      m_counter <= m_counter + {io_inputSi[8], io_inputSi};
  end // always @(posedge)
  assign io_outputStream = $signed(m_counter) > 10'sh10;
endmodule

module Neuron(
  input        clock,
               reset,
  input  [7:0] io_inputPixels_0,
               io_inputPixels_1,
               io_inputPixels_2,
               io_inputPixels_3,
               io_inputPixels_4,
               io_inputPixels_5,
               io_inputPixels_6,
               io_inputPixels_7,
  output       io_outputStream
);

  wire [8:0] _treeAdder_io_outputStream;
  wire [1:0] _bitwiseAND_7_io_outputStream;
  wire [1:0] _bitwiseAND_6_io_outputStream;
  wire [1:0] _bitwiseAND_5_io_outputStream;
  wire [1:0] _bitwiseAND_4_io_outputStream;
  wire [1:0] _bitwiseAND_3_io_outputStream;
  wire [1:0] _bitwiseAND_2_io_outputStream;
  wire [1:0] _bitwiseAND_1_io_outputStream;
  wire [1:0] _bitwiseAND_0_io_outputStream;
  wire [1:0] _b2ISBipolar_7_io_outputStream;
  wire [1:0] _b2ISBipolar_6_io_outputStream;
  wire [1:0] _b2ISBipolar_5_io_outputStream;
  wire [1:0] _b2ISBipolar_4_io_outputStream;
  wire [1:0] _b2ISBipolar_3_io_outputStream;
  wire [1:0] _b2ISBipolar_2_io_outputStream;
  wire [1:0] _b2ISBipolar_1_io_outputStream;
  wire [1:0] _b2ISBipolar_0_io_outputStream;
  wire       _b2SUnipolar_7_io_outputStream;
  wire       _b2SUnipolar_6_io_outputStream;
  wire       _b2SUnipolar_5_io_outputStream;
  wire       _b2SUnipolar_4_io_outputStream;
  wire       _b2SUnipolar_3_io_outputStream;
  wire       _b2SUnipolar_2_io_outputStream;
  wire       _b2SUnipolar_1_io_outputStream;
  wire       _b2SUnipolar_0_io_outputStream;
  reg        regB2S_0;
  reg        regB2S_1;
  reg        regB2S_2;
  reg        regB2S_3;
  reg        regB2S_4;
  reg        regB2S_5;
  reg        regB2S_6;
  reg        regB2S_7;
  reg  [1:0] regB2IS_0;
  reg  [1:0] regB2IS_1;
  reg  [1:0] regB2IS_2;
  reg  [1:0] regB2IS_3;
  reg  [1:0] regB2IS_4;
  reg  [1:0] regB2IS_5;
  reg  [1:0] regB2IS_6;
  reg  [1:0] regB2IS_7;
  reg  [1:0] regAND_0;
  reg  [1:0] regAND_1;
  reg  [1:0] regAND_2;
  reg  [1:0] regAND_3;
  reg  [1:0] regAND_4;
  reg  [1:0] regAND_5;
  reg  [1:0] regAND_6;
  reg  [1:0] regAND_7;
  always @(posedge clock) begin
    if (reset) begin
      regB2S_0 <= 1'h0;
      regB2S_1 <= 1'h0;
      regB2S_2 <= 1'h0;
      regB2S_3 <= 1'h0;
      regB2S_4 <= 1'h0;
      regB2S_5 <= 1'h0;
      regB2S_6 <= 1'h0;
      regB2S_7 <= 1'h0;
      regB2IS_0 <= 2'h0;
      regB2IS_1 <= 2'h0;
      regB2IS_2 <= 2'h0;
      regB2IS_3 <= 2'h0;
      regB2IS_4 <= 2'h0;
      regB2IS_5 <= 2'h0;
      regB2IS_6 <= 2'h0;
      regB2IS_7 <= 2'h0;
      regAND_0 <= 2'h0;
      regAND_1 <= 2'h0;
      regAND_2 <= 2'h0;
      regAND_3 <= 2'h0;
      regAND_4 <= 2'h0;
      regAND_5 <= 2'h0;
      regAND_6 <= 2'h0;
      regAND_7 <= 2'h0;
    end
    else begin
      regB2S_0 <= _b2SUnipolar_0_io_outputStream;
      regB2S_1 <= _b2SUnipolar_1_io_outputStream;
      regB2S_2 <= _b2SUnipolar_2_io_outputStream;
      regB2S_3 <= _b2SUnipolar_3_io_outputStream;
      regB2S_4 <= _b2SUnipolar_4_io_outputStream;
      regB2S_5 <= _b2SUnipolar_5_io_outputStream;
      regB2S_6 <= _b2SUnipolar_6_io_outputStream;
      regB2S_7 <= _b2SUnipolar_7_io_outputStream;
      regB2IS_0 <= _b2ISBipolar_0_io_outputStream;
      regB2IS_1 <= _b2ISBipolar_1_io_outputStream;
      regB2IS_2 <= _b2ISBipolar_2_io_outputStream;
      regB2IS_3 <= _b2ISBipolar_3_io_outputStream;
      regB2IS_4 <= _b2ISBipolar_4_io_outputStream;
      regB2IS_5 <= _b2ISBipolar_5_io_outputStream;
      regB2IS_6 <= _b2ISBipolar_6_io_outputStream;
      regB2IS_7 <= _b2ISBipolar_7_io_outputStream;
      regAND_0 <= _bitwiseAND_0_io_outputStream;
      regAND_1 <= _bitwiseAND_1_io_outputStream;
      regAND_2 <= _bitwiseAND_2_io_outputStream;
      regAND_3 <= _bitwiseAND_3_io_outputStream;
      regAND_4 <= _bitwiseAND_4_io_outputStream;
      regAND_5 <= _bitwiseAND_5_io_outputStream;
      regAND_6 <= _bitwiseAND_6_io_outputStream;
      regAND_7 <= _bitwiseAND_7_io_outputStream;
    end
  end // always @(posedge)
  B2SUnipolar b2SUnipolar_0 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_0),
    .io_outputStream (_b2SUnipolar_0_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_1 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_1),
    .io_outputStream (_b2SUnipolar_1_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_2 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_2),
    .io_outputStream (_b2SUnipolar_2_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_3 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_3),
    .io_outputStream (_b2SUnipolar_3_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_4 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_4),
    .io_outputStream (_b2SUnipolar_4_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_5 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_5),
    .io_outputStream (_b2SUnipolar_5_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_6 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_6),
    .io_outputStream (_b2SUnipolar_6_io_outputStream)
  );
  B2SUnipolar b2SUnipolar_7 (
    .clock           (clock),
    .reset           (reset),
    .io_inputPixel   (io_inputPixels_7),
    .io_outputStream (_b2SUnipolar_7_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_0 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_0_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_1 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_1_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_2 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_2_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_3 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_3_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_4 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_4_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_5 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_5_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_6 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_6_io_outputStream)
  );
  B2ISBipolar b2ISBipolar_7 (
    .clock           (clock),
    .reset           (reset),
    .io_outputStream (_b2ISBipolar_7_io_outputStream)
  );
  BitwiseAND bitwiseAND_0 (
    .io_inputInteger (regB2IS_0),
    .io_inputBit     (regB2S_0),
    .io_outputStream (_bitwiseAND_0_io_outputStream)
  );
  BitwiseAND bitwiseAND_1 (
    .io_inputInteger (regB2IS_1),
    .io_inputBit     (regB2S_1),
    .io_outputStream (_bitwiseAND_1_io_outputStream)
  );
  BitwiseAND bitwiseAND_2 (
    .io_inputInteger (regB2IS_2),
    .io_inputBit     (regB2S_2),
    .io_outputStream (_bitwiseAND_2_io_outputStream)
  );
  BitwiseAND bitwiseAND_3 (
    .io_inputInteger (regB2IS_3),
    .io_inputBit     (regB2S_3),
    .io_outputStream (_bitwiseAND_3_io_outputStream)
  );
  BitwiseAND bitwiseAND_4 (
    .io_inputInteger (regB2IS_4),
    .io_inputBit     (regB2S_4),
    .io_outputStream (_bitwiseAND_4_io_outputStream)
  );
  BitwiseAND bitwiseAND_5 (
    .io_inputInteger (regB2IS_5),
    .io_inputBit     (regB2S_5),
    .io_outputStream (_bitwiseAND_5_io_outputStream)
  );
  BitwiseAND bitwiseAND_6 (
    .io_inputInteger (regB2IS_6),
    .io_inputBit     (regB2S_6),
    .io_outputStream (_bitwiseAND_6_io_outputStream)
  );
  BitwiseAND bitwiseAND_7 (
    .io_inputInteger (regB2IS_7),
    .io_inputBit     (regB2S_7),
    .io_outputStream (_bitwiseAND_7_io_outputStream)
  );
  TreeAdder treeAdder (
    .io_inputStream_0 (regAND_0),
    .io_inputStream_1 (regAND_1),
    .io_inputStream_2 (regAND_2),
    .io_inputStream_3 (regAND_3),
    .io_inputStream_4 (regAND_4),
    .io_inputStream_5 (regAND_5),
    .io_inputStream_6 (regAND_6),
    .io_inputStream_7 (regAND_7),
    .io_outputStream  (_treeAdder_io_outputStream)
  );
  NStanh nStanh (
    .clock           (clock),
    .reset           (reset),
    .io_inputSi      (_treeAdder_io_outputStream),
    .io_outputStream (io_outputStream)
  );
endmodule

module NeuronWrapper(
  input         clock,
                reset,
  input  [7:0]  s_axis_tdata,
  input         s_axis_tkeep,
                s_axis_tvalid,
                s_axis_tlast,
  output        s_axis_tready,
  output [15:0] m_axis_tdata,
  output [1:0]  m_axis_tkeep,
  output        m_axis_tvalid,
                m_axis_tlast,
  input         m_axis_tready
);

  wire        _neuron_io_outputStream;
  reg  [1:0]  state;
  reg  [7:0]  image_0;
  reg  [7:0]  image_1;
  reg  [7:0]  image_2;
  reg  [7:0]  image_3;
  reg  [7:0]  image_4;
  reg  [7:0]  image_5;
  reg  [7:0]  image_6;
  reg  [7:0]  image_7;
  reg  [2:0]  index;
  reg  [15:0] counter;
  reg  [9:0]  minCycles;
  wire        _GEN = state == 2'h0;
  wire        _GEN_0 = s_axis_tvalid & s_axis_tlast;
  wire        _GEN_1 = state == 2'h1;
  wire        _GEN_2 = state == 2'h2 & m_axis_tready;
  wire        _GEN_3 = _GEN | _GEN_1;
  wire        mAxis_data_tlast = ~_GEN_3 & _GEN_2;
  always @(posedge clock) begin
    if (reset) begin
      state <= 2'h0;
      image_0 <= 8'h0;
      image_1 <= 8'h0;
      image_2 <= 8'h0;
      image_3 <= 8'h0;
      image_4 <= 8'h0;
      image_5 <= 8'h0;
      image_6 <= 8'h0;
      image_7 <= 8'h0;
      index <= 3'h0;
      counter <= 16'h0;
      minCycles <= 10'h0;
    end
    else if (_GEN) begin
      if (_GEN_0)
        state <= 2'h1;
      if (s_axis_tvalid & index == 3'h0)
        image_0 <= s_axis_tdata;
      if (s_axis_tvalid & index == 3'h1)
        image_1 <= s_axis_tdata;
      if (s_axis_tvalid & index == 3'h2)
        image_2 <= s_axis_tdata;
      if (s_axis_tvalid & index == 3'h3)
        image_3 <= s_axis_tdata;
      if (s_axis_tvalid & index == 3'h4)
        image_4 <= s_axis_tdata;
      if (s_axis_tvalid & index == 3'h5)
        image_5 <= s_axis_tdata;
      if (s_axis_tvalid & index == 3'h6)
        image_6 <= s_axis_tdata;
      if (s_axis_tvalid & (&index))
        image_7 <= s_axis_tdata;
      if (s_axis_tvalid)
        index <= index + 3'h1;
    end
    else begin
      if (_GEN_1) begin
        if (&minCycles)
          state <= 2'h2;
        counter <= counter + {15'h0, _neuron_io_outputStream};
        minCycles <= minCycles + 10'h1;
      end
      else if (_GEN_2) begin
        state <= 2'h0;
        counter <= 16'h0;
        minCycles <= 10'h0;
      end
      if (_GEN_1 | ~_GEN_2) begin
      end
      else begin
        image_0 <= 8'h0;
        image_1 <= 8'h0;
        image_2 <= 8'h0;
        image_3 <= 8'h0;
        image_4 <= 8'h0;
        image_5 <= 8'h0;
        image_6 <= 8'h0;
        image_7 <= 8'h0;
        index <= 3'h0;
      end
    end
  end // always @(posedge)
  Neuron neuron (
    .clock            (clock),
    .reset            (reset),
    .io_inputPixels_0 (image_0),
    .io_inputPixels_1 (image_1),
    .io_inputPixels_2 (image_2),
    .io_inputPixels_3 (image_3),
    .io_inputPixels_4 (image_4),
    .io_inputPixels_5 (image_5),
    .io_inputPixels_6 (image_6),
    .io_inputPixels_7 (image_7),
    .io_outputStream  (_neuron_io_outputStream)
  );
  assign s_axis_tready = ~(_GEN & _GEN_0);
  assign m_axis_tdata = _GEN_3 | ~_GEN_2 ? 16'h0 : counter;
  assign m_axis_tkeep = 2'h1;
  assign m_axis_tvalid = mAxis_data_tlast;
  assign m_axis_tlast = mAxis_data_tlast;
endmodule

